plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "com.google.gms.google-services" // Google Services Gradle plugin
    id "com.google.firebase.crashlytics"
    id "androidx.navigation.safeargs.kotlin"
    id "kotlin-kapt" // Required for annotation processing.
}

ext {
    lifecycle_version = "2.3.1"
    retrofit_version = "2.9.0"
    koin_version= "3.1.2"
}

def versionPropsFile = rootProject.file("version.properties")
def versionBuild

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    /* Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps["VERSION_BUILD"].toInteger()
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    /* Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk */
    ext.autoIncrementBuildNumber = {
        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps["VERSION_BUILD"].toInteger() + 1
            versionProps["VERSION_BUILD"] = versionBuild.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }

    defaultConfig {
        applicationId "com.mendelin.medicineviewer"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode versionBuild
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resConfigs "en", "ro"

        /* REST API endpoints */
        buildConfigField "String", "ENPOINT_MEDICINES", "\"/nomenclator/medicamente\""

        /* REST API parameter names */
        buildConfigField "String", "QUERY_PAGE", "\"page\""

        dexOptions {
            javaMaxHeapSize "4g"
        }

        buildFeatures {
            dataBinding = true
            viewBinding = true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "medicineviewer_${variant.buildType.name}_${defaultConfig.versionName}(${defaultConfig.versionCode}).apk"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".developer"
            debuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            /* Keep local server for DEBUG build type */
            buildConfigField "String", "BASE_URL", "\"https://www.anm.ro\""
            buildConfigField("boolean", "RELEASE", "false")
        }

        release {
            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            /* Keep production server for RELEASE build type */
            buildConfigField "String", "BASE_URL", "\"https://www.anm.ro\""
            buildConfigField("boolean", "RELEASE", "true")
        }
    }

    // Hook to check if the release/debug task is among the tasks to be executed.
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) { /* when run debug task */
            autoIncrementBuildNumber()
        } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
            autoIncrementBuildNumber()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    packagingOptions {
        exclude "META-INF/proguard/androidx-annotations.pro"
    }
}

dependencies {
/* Testing */
    implementation fileTree(dir: "libs", include: ["*.aar", "*.jar"], exclude: [])
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.4.0"

    /* Kotlin */
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    /* Coroutines */
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"

    /* Android libraries */
    implementation "androidx.appcompat:appcompat:1.3.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.google.android.material:material:1.4.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.security:security-crypto:1.1.0-alpha03"

    /* Firebase Crashlytics */
    implementation "com.google.firebase:firebase-crashlytics-ktx:18.1.0"
    implementation "com.google.firebase:firebase-analytics-ktx:19.0.0"

    /* Navigation components */
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    /* Lifecycle, LiveData, ViewModel */
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    /* ReactiveX */
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"

    /* Retrofit networking library */
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"

    /* Timber logging */
    implementation "com.jakewharton.timber:timber:4.7.1"

    /* Koin - dependency injection */
    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-android-compat:$koin_version"

    /* Jsoup - HTML parsing */
    implementation "org.jsoup:jsoup:1.14.1"
}